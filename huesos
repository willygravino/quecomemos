@login_required
def lista_de_compras(request):
    locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')  # Configura la localización a español
    # Obtener la fecha actual
    today = date.today()
    # Filtrar los objetos de ElegidosXDia para excluir aquellos cuya fecha sea anterior a la fecha actual
    menues_del_usuario = ElegidosXDia.objects.filter(user=request.user, el_dia_en_que_comemos__gte=today).order_by('el_dia_en_que_comemos')

    platos_por_dia = {}

    no_incluir =""

    hay_comentario = "no hay comentario"

    lista_de_ingredientes = set()

    ingredientes_unicos = {}  # Diccionario para almacenar ingredientes a comprar, estado, comentario
    
    # estas dos definiciones de variables tal vez se puedan sacar
    dia_en_que_comemos_str = ""
    buscar_cena_por_dia = ""
    # xxxxxxxx
    
    ingredientes_no_comprados = []
    lista_de_compras = []

    items_resultados = {}

    # Obtener el perfil del usuario actual
    perfil = get_object_or_404(Profile, user=request.user)

    if request.method == 'POST':

                no_incluir = set()
                # items = {} la necesito acá pero la muevo para ver contexto

                lista_de_compras = request.POST.getlist("ingrediente_a_comprar")

                for menu_del_dia in menues_del_usuario:
                    platos_dia = menu_del_dia.platos_que_comemos
                    # Convertir dia_en_que_comemos a cadena con un formato específico
                    dia_en_que_comemos_str = menu_del_dia.el_dia_en_que_comemos.strftime('%d %b %Y')

                    almuerzo_que_comemos = platos_dia.get("almuerzo", {}).get("plato", [])
                    almuerzo_info = platos_dia.get("almuerzo", {}).get("ingredientes", [])

                    # Concatenar el valor de 'dia_en_que_comemos' a 'variedad_value["variedad"]'
                    if almuerzo_que_comemos:
                        buscar_almuerzo_por_dia = almuerzo_que_comemos + dia_en_que_comemos_str
                    else:
                         buscar_almuerzo_por_dia = None

                    if buscar_almuerzo_por_dia in request.POST:
                          almuerzo_elegido = True
                          lista_de_ingredientes.update({ingrediente.strip() for ingrediente in almuerzo_info.split(',')})

                          if not menu_del_dia.platos_que_comemos["almuerzo"]["elegido"]:
                                    menu_del_dia.platos_que_comemos["almuerzo"]["elegido"] = True
                                    # Guardar el objeto en la base de datos
                                    menu_del_dia.save()
                                    no_incluir.update({ingrediente.strip() for ingrediente in almuerzo_info.split(',')})

                    else:
                        almuerzo_elegido = False
                        menu_del_dia.platos_que_comemos["almuerzo"]["elegido"] = False
                        # Guardar el objeto en la base de datos
                        menu_del_dia.save()

                    item_nombres = [
                            "entrada1", "entrada2", "entrada3", "entrada4",
                            "guarnicion1", "guarnicion2", "guarnicion3", "guarnicion4",
                            "postre1", "postre2", "salsa1", "salsa2", "salsa3", "salsa4",
                            "dip1", "dip2", "dip3", "dip4", "trago1", "trago2"
                        ]

                    platos_por_dia[menu_del_dia.el_dia_en_que_comemos] = {}

                        # Iterar sobre cada item y acumular resultados
                    for item_nombre in item_nombres:

                        # Llamada a la función y desglosar los tres resultados
                        resultado, lista_de_ingredientes, no_incluir = procesar_item(platos_dia, item_nombre, menu_del_dia, dia_en_que_comemos_str, request, lista_de_ingredientes, no_incluir)

                        # Actualizar `items` con el resultado específico del item
                        items_resultados[item_nombre] = resultado

                        # AQUI SE GENERA UNA DOBLE REFERENCIA QUE ESTARÍA BUENO CORREGIR
                        # CON ESTO items_resultados[item_nombre] = resultado ASÍ >>>>> {}, 'guarnicion1': {'guarnicion1': {'plato': 'Puré', 'ingredientes': 'papas, leche, sal, manteca', 'elegido': False}}, 'guarnicion2': {}

                        # Luego puedes llamar a `.update()` sin problemas
                        platos_por_dia[menu_del_dia.el_dia_en_que_comemos].update({
                            item_nombre: {
                                "plato": items_resultados.get(item_nombre, {}).get(item_nombre, {}).get("plato"),
                                "ingredientes": items_resultados.get(item_nombre, {}).get(item_nombre, {}).get("ingredientes"),
                                "elegido": items_resultados.get(item_nombre, {}).get(item_nombre, {}).get("elegido")
                            }
                            })

                    cena_que_comemos = platos_dia.get("cena", {}).get("plato", [])
                    cena_info = platos_dia.get("cena", {}).get("ingredientes", [])
                    # # Convertir dia_en_que_comemos a cadena con un formato específico
                    # dia_en_que_comemos_str = menu_del_dia.el_dia_en_que_comemos.strftime('%d %b. %Y')

                    # Concatenar el valor de 'dia_en_que_comemos' a 'variedad_value["variedad"]'
                    if cena_que_comemos:
                        buscar_cena_por_dia = cena_que_comemos + dia_en_que_comemos_str
                    else:
                         buscar_cena_por_dia = None

                    if buscar_cena_por_dia in request.POST:
                          cena_elegida = True
                          lista_de_ingredientes.update({ingrediente.strip() for ingrediente in cena_info.split(',')})

                          if not menu_del_dia.platos_que_comemos["cena"]["elegido"]:
                                menu_del_dia.platos_que_comemos["cena"]["elegido"] = True
                                # Guardar el objeto en la base de datos
                                menu_del_dia.save()
                                no_incluir.update({ingrediente.strip() for ingrediente in cena_info.split(',')})
                    else:
                          cena_elegida = False
                          menu_del_dia.platos_que_comemos["cena"]["elegido"] = False
                        # Guardar el objeto en la base de datos
                          menu_del_dia.save()

                    almuerzo_variedades = platos_dia.get("variedades_almuerzo", {})
                    if almuerzo_variedades:

                            for variedad_key, variedad_value in almuerzo_variedades.items():
                                  # Convertir dia_en_que_comemos a cadena con un formato específico
                                dia_en_que_comemos_str = menu_del_dia.el_dia_en_que_comemos.strftime('%d %b. %Y')
                                 # Concatenar el valor de 'dia_en_que_comemos' a 'variedad_value["variedad"]'
                                buscar_variedad_por_dia = variedad_value["variedad"] + dia_en_que_comemos_str
                                if buscar_variedad_por_dia in request.POST:

                                   ingredientes = variedad_value['ingredientes_de_variedades']
                                #    lista_de_ingredientes = [ingrediente.strip() for ingrediente in ingredientes.split(',')]
                                   lista_de_ingredientes.update({ingrediente.strip() for ingrediente in ingredientes.split(',')})

                                   if not menu_del_dia.platos_que_comemos["variedades_almuerzo"][variedad_key]["elegido"]:
                                        almuerzo_variedades[variedad_key]["elegido"] = True
                                        menu_del_dia.save()
                                        no_incluir.update(({ingrediente.strip() for ingrediente in ingredientes.split(',')}))
                                else:
                                     almuerzo_variedades[variedad_key]["elegido"] = False
                                     menu_del_dia.platos_que_comemos["variedades_almuerzo"] = almuerzo_variedades
                                     menu_del_dia.save()

                    cena_variedades = platos_dia.get("variedades_cena", {})

                    if cena_variedades:

                            for variedad_key, variedad_value in cena_variedades.items():
                                 # Convertir dia_en_que_comemos a cadena con un formato específico
                                dia_en_que_comemos_str = menu_del_dia.el_dia_en_que_comemos.strftime('%d %b. %Y')
                                 # Concatenar el valor de 'dia_en_que_comemos' a 'variedad_value["variedad"]'
                                buscar_variedad_por_dia = variedad_value["variedad"] + dia_en_que_comemos_str
                                if buscar_variedad_por_dia in request.POST:
                                   ingredientes = variedad_value['ingredientes_de_variedades']
                                   lista_de_ingredientes.update({ingrediente.strip() for ingrediente in ingredientes.split(',')})

                                   if not menu_del_dia.platos_que_comemos["variedades_cena"][variedad_key]["elegido"]:
                                        cena_variedades[variedad_key]["elegido"] = True

                                        # Asignar la variable modificada al objeto correspondiente
                                        menu_del_dia.platos_que_comemos["variedades_cena"] = cena_variedades
                                            # Guardar el objeto en la base de datos
                                        menu_del_dia.save()
                                        no_incluir.update(({ingrediente.strip() for ingrediente in ingredientes.split(',')}))

                                else:
                                     cena_variedades[variedad_key]["elegido"] = False
                                      # Asignar la variable modificada al objeto correspondiente
                                     menu_del_dia.platos_que_comemos["variedades_cena"] = cena_variedades
                                      # Guardar el objeto en la base de datos
                                     menu_del_dia.save()

                    set_compras = set(lista_de_compras)
                    # Identificar elementos que están en lista_de_ingredientes pero no en set_compras
                    ingredientes_no_comprados_1 = lista_de_ingredientes - set_compras
                    ingredientes_no_comprados = ingredientes_no_comprados_1 - no_incluir

                    if ingredientes_no_comprados:
                            for ingrediente_nuevo in ingredientes_no_comprados:
                                if ingrediente_nuevo not in perfil.ingredientes_que_tengo:
                                    # Actualizar el campo ingredientes_que_tengo
                                    perfil.ingredientes_que_tengo.append(ingrediente_nuevo)
                                    # Guardar el perfil actualizado
                                    perfil.save()

                                    # # Obtener el comentario del request.POST usando la clave construida
                                    # clave_comentario = f"{ingrediente_nuevo}_detalle"
                                    # el_comentario = request.POST.get(clave_comentario, '')

                    if lista_de_compras:
                            for ingrediente_a_comprar in lista_de_compras:
                                 if ingrediente_a_comprar in perfil.ingredientes_que_tengo:
                                    # Eliminar el ingrediente de la lista
                                    perfil.ingredientes_que_tengo.remove(ingrediente_a_comprar)
                                    # Guardar el perfil actualizado
                                    perfil.save()

                    el_comentario = ""

                    if lista_de_ingredientes:
                       for ingrediente in lista_de_ingredientes:
                            if ingrediente in no_incluir:
                                 for item in perfil.comentarios:
                                    ingrediente_archivado, comentario = item.split("%", 1)  # Dividir en ingrediente y comentario
                                    if ingrediente_archivado == ingrediente:
                                            el_comentario = comentario
                                            # ingrediente_final = ingrediente_archivado
                            else:
                                # Obtener el comentario del request.POST usando la clave construida
                                clave_comentario = f"{ingrediente}_detalle"
                                el_comentario = request.POST.get(clave_comentario, '')
                                # hay_comentario = el_coment

                                actualizado = False

                                # Recorrer la lista y buscar el comentario asociado
                                for item in perfil.comentarios:
                                    ingrediente_archivado, comentario = item.split("%", 1)  # Dividir en ingrediente y comentario
                                    if ingrediente_archivado == ingrediente:
                                        if el_comentario:
                                            # Variable de control para saber si se actualizó algún elemento
                                            actualizado = True
                                            # Actualizar el comentario del ingrediente
                                            perfil.comentarios[perfil.comentarios.index(item)] = f"{ingrediente}%{el_comentario}"
                                        else:
                                            actualizado = True
                                            # Eliminar el comentario del ingrediente
                                            perfil.comentarios.remove(item)

                                if not actualizado and el_comentario:
                                    # Unir el ingrediente nuevo con el comentario, separado por '%'
                                    ingrediente_con_comentario = f"{ingrediente}%{el_comentario}"
                                    # Actualizar el campo ingredientes_que_tengo
                                    perfil.comentarios.append(ingrediente_con_comentario)

                                # Guardar el perfil actualizado
                                perfil.save()

                            if ingrediente in perfil.ingredientes_que_tengo:
                                ingredientes_unicos [ingrediente] = {
                                "comentario": el_comentario,
                                "estado": "tengo" }

                            else:
                                ingredientes_unicos [ingrediente] = {
                                "comentario": el_comentario,
                                "estado": "no-tengo" }



                    platos_por_dia[menu_del_dia.el_dia_en_que_comemos].update({
                        "almuerzo": almuerzo_que_comemos,
                        "almuerzo_elegido": almuerzo_elegido,
                        "cena": cena_que_comemos,
                        "cena_elegida": cena_elegida,
                        "almuerzo_info": almuerzo_info,
                        "cena_info": cena_info,
                        "variedades": almuerzo_variedades,
                        "variedades_cena": cena_variedades
                    })

    else:

        platos_por_dia = defaultdict(dict)  # Diccionario donde cada fecha tendrá sus platos

        for menu in menues_del_usuario:
            fecha = menu.el_dia_en_que_comemos  # Accede al atributo del modelo
            platos = menu.platos_que_comemos or {}  # Asegura que no sea None (debe ser un diccionario)

            platos_por_dia[fecha].update(platos)  # Agrega los platos al día correspondiente

        # Convertir defaultdict a dict antes de enviarlo al contexto
        platos_por_dia = dict(platos_por_dia)


        # Recorrer los días y los platos
        for platos in platos_por_dia.values():
            for datos in platos.values():
                # Si el plato está elegido, añadir sus ingredientes
                if datos.get("elegido"):
                   lista_de_ingredientes.update(map(str.strip, datos["ingredientes"].split(",")))

                # Recorrer las variedades si existen
                if "variedades" in datos:
                    for variedad in datos["variedades"].values():
                        if variedad.get("elegido"):  # Verificar si la variedad está marcada como elegida
                            lista_de_ingredientes.update(map(str.strip, variedad["ingredientes"].split(",")))

        # Convertir a lista ordenada
        lista_de_ingredientes = sorted(lista_de_ingredientes)

        if lista_de_ingredientes:
            for ingrediente in lista_de_ingredientes:
                el_comentario = ""
                # Recorrer la lista y buscar el comentario asociado
                for item in perfil.comentarios:
                    # if "%" in item:
                    ingrediente_archivado, comentario = item.split("%", 1)  # Dividir en ingrediente y comentario
                    if ingrediente_archivado == ingrediente:
                        el_comentario = comentario

                if ingrediente in perfil.ingredientes_que_tengo:
                    ingredientes_unicos [ingrediente] = {
                        "comentario": el_comentario,
                        "estado": "tengo" }
                else:
                    ingredientes_unicos [ingrediente] = {
                        "comentario": el_comentario,
                        "estado": "no-tengo" }

    # Generar el mensaje de WhatsApp
    mensaje_whatsapp = "Lista de compras:\n"

    lista_de_compras =[]
    # Recorrer el diccionario para formatear los ingredientes que no tienes
    for ingrediente, detalles in ingredientes_unicos.items():
        if detalles["estado"] == "no-tengo":
            comentario = detalles["comentario"]
            # Formatear el ingrediente con el comentario si está presente
            if comentario:
                mensaje_whatsapp += f"• {ingrediente} ({comentario})\n"
                lista_de_compras.append(f"{ingrediente} ({comentario})")

            else:
                mensaje_whatsapp += f"• {ingrediente}\n"
                lista_de_compras.append(f"{ingrediente}")


    # Reemplazar los saltos de línea para que sean compatibles con la URL de WhatsApp
    mensaje_whatsapp = mensaje_whatsapp.replace("\n", "%0A")
    # if ingredientes_unicos:
    #     mensaje_whatsapp += "\n".join(ingredientes_unicos)
    # mensaje_whatsapp = mensaje_whatsapp.replace("\n", "%0A")  # Reemplazar saltos de línea para la URL

# ESTO SE REPITE EN FILTRO DE PLATOS, PODRÍA OPTIMIZARSE?????
   # Obtener la fecha y hora actuales
    fecha_actual = datetime.datetime.now().date()

         # Filtra las fechas únicas en `el_dia_en_que_comemos` para los objetos del usuario actual
    fechas_existentes = ElegidosXDia.objects.filter(user=request.user,el_dia_en_que_comemos__gte=fecha_actual).values_list('el_dia_en_que_comemos', flat=True).distinct()

    # Lista para almacenar los días y sus nombres
    dias_desde_hoy = []

     # Obtener el nombre del día de la semana para la fecha actual
    nombre_dia_semana = fecha_actual.strftime('%A')

    # Calcular y agregar las fechas y nombres de los días para los próximos 6 días
    for i in range(0, 6):
        fecha = fecha_actual + timedelta(days=i)
        nombre_dia = fecha.strftime('%A')
        dias_desde_hoy.append((fecha))


# ***********

    context = {
        'platos_por_dia': platos_por_dia,
        'ingredientes_separados_por_comas': ingredientes_unicos,
        'el_request': request.POST,
        "los_items": items_resultados,
        "lista_de_ingredientes": lista_de_ingredientes,
        "lista_de_compras": lista_de_compras,
        "no_incluir": no_incluir,
        "dias_programados": fechas_existentes,
        "dias_desde_hoy": dias_desde_hoy,
        "dia_en_que_comemos_str": dia_en_que_comemos_str,
        "buscar_cena_por_dia" : buscar_cena_por_dia,
        "claves_en_el_request" : request.POST.keys(),
        "ingredientes_no_comprados": ingredientes_no_comprados,
        "mensaje_whatsapp": mensaje_whatsapp,
        "parametro" : "lista-compras"
    }

    return render(request, 'AdminVideos/lista_de_compras.html', context)

