                        value="{{ variedades_en_base['variedad' ~ i].ingredientes_variedades|default:'' }}">




            {% for i in '0123456789'|make_list %}
            {{ forloop.counter }}
            {% endfor %}


            <div class="container">
                <div class="accordion" id="accordionExample">
                    {% for key, value in variedades_en_base.items %}
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="heading{{ loop.index }}">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                data-bs-target="#collapse{{ loop.index }}" aria-expanded="true"
                                aria-controls="collapse{{ loop.index }}">
                                Variedad {{ loop.index }}: <input type="text" name="variedad{{ loop.index }}"
                                    value="{{ key }}">
                            </button>
                        </h2>
                        <div id="collapse{{ loop.index }}" class="accordion-collapse collapse"
                            aria-labelledby="heading{{ loop.index }}" data-bs-parent="#accordionExample">
                            <div class="accordion-body">
                                Ingredientes de variedad {{ loop.index }}: <input type="text"
                                    name="ingredientes_de_variedad{{ loop.index }}" value="{{ value }}">
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>




@login_required
def menu_elegido(request):
    # Obtener la fecha actual
    today = date.today()  # Importa 'date' desde 'datetime'
        # Filtrar los objetos de ElegidosXDia para excluir aquellos cuya fecha sea anterior a la fecha actual
    objetos_del_usuario = ElegidosXDia.objects.filter(user=request.user, el_dia_en_que_comemos__gte=today).order_by('el_dia_en_que_comemos')
    platos_por_dia = {}
    ingredientes_unicos = set()  # Conjunto para almacenar ingredientes únicos
    lista_de_compras = []

    # Inicializar las listas de ingredientes a excluir
    ingredientes_a_excluir_almuerzo = []
    ingredientes_a_excluir_cena = []

      # def lista_de_compras(request):
    if request.method == 'POST':
            ingredientes_a_excluir_almuerzo = request.POST.getlist('excluir_almuerzo')
            ingredientes_a_excluir_cena = request.POST.getlist('excluir_cena')
            # Aquí puedes procesar los ingredientes seleccionados de almuerzo y cena si es necesario
            ingredientes_seleccionados = request.POST.getlist('ingrediente_a_comprar')

            # Agrega los ingredientes seleccionados que no están excluidos a la lista de compras
            for ingrediente in ingredientes_seleccionados:
                if ingrediente not in ingredientes_a_excluir_almuerzo and ingrediente not in ingredientes_a_excluir_cena:
                    lista_de_compras.append(ingrediente)

    for objeto in objetos_del_usuario:
        platos_dia = objeto.platos_que_comemos
        almuerzo_que_comemos = platos_dia.get("almuerzo", [])
        cena_que_comemos = platos_dia.get("cena", [])

        almuerzo_info_queryset = Plato.objects.filter(nombre_plato=almuerzo_que_comemos).values("ingredientes")
        almuerzo_info = almuerzo_info_queryset.first()['ingredientes'] if almuerzo_info_queryset.exists() else ""

        # Plato.objects.filter(ingredientes__icontains="%%")
        cena_info_queryset = Plato.objects.filter(nombre_plato=cena_que_comemos).values("ingredientes")
        cena_info = cena_info_queryset.first()['ingredientes'] if cena_info_queryset.exists() else ""

        # if almuerzo_info:
        #     ingredientes_unicos.update(almuerzo_info.split(", "))
        # if cena_info:
        #     ingredientes_unicos.update(cena_info.split(", "))

        
        if almuerzo_info:
            # Actualiza los ingredientes únicos excluyendo los seleccionados para excluir del almuerzo
            ingredientes_unicos.update(filter(lambda ingrediente: ingrediente not in ingredientes_a_excluir_almuerzo, almuerzo_info.split(", ")))
        if cena_info:
            # Actualiza los ingredientes únicos excluyendo los seleccionados para excluir de la cena
            ingredientes_unicos.update(filter(lambda ingrediente: ingrediente not in ingredientes_a_excluir_cena, cena_info.split(", ")))
    


        if not cena_info:
            cena_info = ""
        if not almuerzo_info:
            almuerzo_info = ""

        platos_por_dia[objeto.el_dia_en_que_comemos] = {
            "almuerzo": almuerzo_que_comemos,
            "cena": cena_que_comemos,
            "almuerzo_info": almuerzo_info,
            "cena_info": cena_info
        }

        lista_de_compras = []
            
    context = {'platos_por_dia': platos_por_dia, 'ingredientes_separados_por_comas': ingredientes_unicos, "lista_de_compras": lista_de_compras,  " ingredientes_a_excluir_cena": ingredientes_a_excluir_cena }
    return render(request, 'AdminVideos/menu_elegido.html', context)






