class PlatoList(ListView):
    model = Plato
    context_object_name = "platos"
    # query = None

    def get_queryset(self):
        # self.query = "tomatelas"

        if self.request.user.is_authenticated:
            try:
                if self.request.user.profile:
                        self.query = self.request.GET.get("la-busqueda")
                        if self.query:
                            object_list = Plato.objects.filter(ingredientes__icontains=self.query)
                        return object_list
                    
                
            except Exception:
            #    object_list = Plato.objects.filter(ingredientes__icontains="%%")
               object_list = Plato.objects.all()
            return object_list
        else:
            # object_list = Plato.objects.filter(ingredientes__icontains="%%")
            object_list = Plato.objects.all()
        return object_list

    def get_context_data(self, **kwargs):
            context = super().get_context_data(**kwargs)
            # Pasar query al contexto
            context['query'] = self.query if self.query else "tomate"
            return context

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # Obtener objetos de Elegidos asociados al usuario logueado
        usuario = self.request.user
        elegidos = Elegidos.objects.filter(usuario=usuario)

        # Agregar objetos de Elegidos al contexto
        context['elegidos'] = elegidos      
        # fecha_actual = datetime.now()
        # fecha = fecha_actual.date()
        # context['fecha_actual'] = fecha

        return context